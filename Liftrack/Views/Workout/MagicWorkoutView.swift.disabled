import SwiftUI
import SwiftData

struct MagicWorkoutView: View {
    @Environment(\.modelContext) private var modelContext
    @Bindable var session: WorkoutSession
    @StateObject private var settings = SettingsManager.shared
    
    // The magic - automatic weight suggestions
    @State private var suggestedWeights: [String: Double] = [:]
    @State private var showingIntelligence = false
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(session.exercises.sorted(by: { $0.orderIndex < $1.orderIndex })) { exercise in
                    MagicExerciseCard(
                        exercise: exercise,
                        suggestedWeight: suggestedWeights[exercise.id.uuidString] ?? 0,
                        onSetComplete: { set in
                            updateSuggestions(for: exercise, completedSet: set)
                        }
                    )
                }
            }
            .padding()
        }
        .safeAreaInset(edge: .top) {
            MagicHeader(showingIntelligence: $showingIntelligence)
        }
        .onAppear {
            generateInitialSuggestions()
        }
        .sheet(isPresented: $showingIntelligence) {
            IntelligenceView(session: session)
        }
    }
    
    private func generateInitialSuggestions() {
        // Get intelligent suggestions for each exercise
        for exercise in session.exercises {
            // Get history for this exercise
            let history = getHistory(for: exercise.exerciseName)
            
            // Get smart suggestion
            let plan = IntelligentProgressionEngine.getNextWorkout(
                for: exercise.exercise,
                history: history
            )
            
            suggestedWeights[exercise.id.uuidString] = plan.weight
            
            // Auto-fill first set with suggestion
            if let firstSet = exercise.sets.first {
                firstSet.weight = plan.weight
                firstSet.targetReps = plan.reps
            }
        }
    }
    
    private func updateSuggestions(for exercise: SessionExercise, completedSet: WorkoutSet) {
        // Real-time adjustment based on performance
        let nextWeight = IntelligentProgressionEngine.suggestNextWeight(
            lastWeight: completedSet.weight,
            lastReps: completedSet.reps,
            completed: completedSet.isCompleted,
            failed: completedSet.isFailed
        )
        
        // Update next set automatically
        if let nextSet = exercise.sets.first(where: { !$0.isCompleted }) {
            nextSet.weight = nextWeight
        }
    }
    
    private func getHistory(for exerciseName: String) -> [SessionExercise] {
        // Fetch from SwiftData
        let descriptor = FetchDescriptor<WorkoutSession>(
            predicate: #Predicate { $0.completedAt != nil },
            sortBy: [SortDescriptor(\.completedAt, order: .reverse)]
        )
        
        guard let sessions = try? modelContext.fetch(descriptor) else { return [] }
        
        return sessions.compactMap { session in
            session.exercises.first { $0.exerciseName == exerciseName }
        }
    }
}

// MARK: - Magic Exercise Card

struct MagicExerciseCard: View {
    let exercise: SessionExercise
    let suggestedWeight: Double
    let onSetComplete: (WorkoutSet) -> Void
    
    @State private var isExpanded = true
    @State private var showingDetails = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            // Header
            HStack {
                Text(exercise.exerciseName)
                    .font(.headline)
                
                Spacer()
                
                if suggestedWeight > 0 {
                    SuggestionBadge(weight: suggestedWeight)
                }
                
                Button(action: { isExpanded.toggle() }) {
                    Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                        .foregroundStyle(.secondary)
                }
            }
            .padding()
            .contentShape(Rectangle())
            .onTapGesture {
                withAnimation(.spring(response: 0.3)) {
                    isExpanded.toggle()
                }
            }
            
            if isExpanded {
                Divider()
                
                // Sets
                VStack(spacing: 0) {
                    ForEach(exercise.sets.sorted(by: { $0.setNumber < $1.setNumber })) { set in
                        MagicSetRow(
                            set: set,
                            suggestedWeight: suggestedWeight,
                            onComplete: {
                                onSetComplete(set)
                            }
                        )
                        
                        if set != exercise.sets.last {
                            Divider()
                                .padding(.leading, 16)
                        }
                    }
                }
            }
        }
        .background(Color(.secondarySystemGroupedBackground))
        .cornerRadius(16)
    }
}

// MARK: - Magic Set Row

struct MagicSetRow: View {
    @Bindable var set: WorkoutSet
    let suggestedWeight: Double
    let onComplete: () -> Void
    
    @State private var weight = ""
    @State private var reps = ""
    @FocusState private var focusedField: Field?
    
    enum Field {
        case weight, reps
    }
    
    var body: some View {
        HStack(spacing: 16) {
            // Set number with smart indicator
            ZStack {
                Circle()
                    .fill(set.isWarmup ? Color.orange.opacity(0.2) : Color.clear)
                    .frame(width: 32, height: 32)
                
                Text(set.isWarmup ? "W" : "\(set.setNumber)")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundStyle(set.isWarmup ? .orange : .secondary)
            }
            
            // Weight field with smart fill
            VStack(alignment: .leading, spacing: 2) {
                HStack(spacing: 4) {
                    TextField(
                        "\(Int(suggestedWeight))",
                        text: $weight
                    )
                    .font(.system(size: 20, weight: .semibold, design: .rounded))
                    .multilineTextAlignment(.center)
                    .frame(width: 60)
                    .focused($focusedField, equals: .weight)
                    .keyboardType(.decimalPad)
                    .onChange(of: weight) { _, new in
                        if let value = Double(new) {
                            set.weight = value
                        }
                    }
                    
                    Text("lbs")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }
                
                if weight.isEmpty && suggestedWeight > 0 {
                    Text("Suggested")
                        .font(.caption2)
                        .foregroundStyle(.tint)
                }
            }
            
            Text("Ã—")
                .foregroundStyle(.secondary)
            
            // Reps field
            TextField(
                "8",
                text: $reps
            )
            .font(.system(size: 20, weight: .semibold, design: .rounded))
            .multilineTextAlignment(.center)
            .frame(width: 40)
            .focused($focusedField, equals: .reps)
            .keyboardType(.numberPad)
            .onChange(of: reps) { _, new in
                if let value = Int(new) {
                    set.reps = value
                }
            }
            
            Spacer()
            
            // Completion button with intelligence
            CompletionButton(
                isCompleted: set.isCompleted,
                isFailed: set.isFailed,
                estimated1RM: calculate1RM()
            ) {
                // Auto-fill if empty
                if weight.isEmpty {
                    weight = "\(Int(suggestedWeight))"
                    set.weight = suggestedWeight
                }
                if reps.isEmpty {
                    reps = "8"
                    set.reps = 8
                }
                
                set.toggleCompleted()
                onComplete()
                
                // Haptic feedback
                SettingsManager.shared.impactFeedback(style: .light)
            }
        }
        .padding()
        .onAppear {
            weight = set.weight > 0 ? "\(Int(set.weight))" : ""
            reps = set.reps > 0 ? "\(set.reps)" : ""
        }
    }
    
    private func calculate1RM() -> Double? {
        guard let w = Double(weight), let r = Int(reps), r > 0, w > 0 else { return nil }
        return w * (1 + 0.0333 * Double(r)) // Epley formula
    }
}

// MARK: - Components

struct MagicHeader: View {
    @Binding var showingIntelligence: Bool
    @StateObject private var timerManager = WorkoutTimerManager.shared
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text("Today's Workout")
                    .font(.largeTitle.bold())
                
                HStack(spacing: 8) {
                    Image(systemName: "timer")
                        .font(.caption)
                    
                    Text(formatTime(timerManager.elapsedTime))
                        .font(.system(.caption, design: .monospaced))
                }
                .foregroundStyle(.secondary)
            }
            
            Spacer()
            
            Button(action: { showingIntelligence = true }) {
                Image(systemName: "brain")
                    .font(.title2)
                    .foregroundStyle(.tint)
                    .symbolEffect(.pulse, value: showingIntelligence)
            }
        }
        .padding()
        .background(.ultraThinMaterial)
    }
    
    private func formatTime(_ seconds: Int) -> String {
        let mins = seconds / 60
        let secs = seconds % 60
        return String(format: "%02d:%02d", mins, secs)
    }
}

struct SuggestionBadge: View {
    let weight: Double
    
    var body: some View {
        HStack(spacing: 4) {
            Image(systemName: "sparkles")
                .font(.caption2)
            
            Text("\(Int(weight)) lbs")
                .font(.caption.weight(.medium))
        }
        .padding(.horizontal, 8)
        .padding(.vertical, 4)
        .background(Color.accentColor.opacity(0.15))
        .foregroundStyle(.tint)
        .cornerRadius(6)
    }
}

struct CompletionButton: View {
    let isCompleted: Bool
    let isFailed: Bool
    let estimated1RM: Double?
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 4) {
                ZStack {
                    Circle()
                        .stroke(
                            isCompleted ? (isFailed ? Color.orange : Color.green) : Color.secondary.opacity(0.3),
                            lineWidth: 2
                        )
                        .frame(width: 44, height: 44)
                    
                    if isCompleted {
                        Image(systemName: isFailed ? "exclamationmark" : "checkmark")
                            .font(.system(size: 20, weight: .medium))
                            .foregroundStyle(isFailed ? .orange : .green)
                    }
                }
                
                // Show 1RM estimate
                if let oneRM = estimated1RM, oneRM > 0 {
                    Text("â‰ˆ\(Int(oneRM))")
                        .font(.caption2)
                        .foregroundStyle(.secondary)
                }
            }
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Intelligence View

struct IntelligenceView: View {
    let session: WorkoutSession
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(alignment: .leading, spacing: 24) {
                    // Performance Overview
                    PerformanceCard()
                    
                    // Adaptation Status
                    AdaptationCard()
                    
                    // Recommendations
                    RecommendationsCard()
                    
                    // Advanced Settings
                    AdvancedToggle()
                }
                .padding()
            }
            .navigationTitle("Training Intelligence")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .topBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct PerformanceCard: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Label("Performance Trend", systemImage: "chart.line.uptrend.xyaxis")
                .font(.headline)
            
            HStack(spacing: 20) {
                StatBox(label: "Strength", value: "+5%", icon: "arrow.up.circle.fill", color: .green)
                StatBox(label: "Volume", value: "Optimal", icon: "chart.bar.fill", color: .blue)
                StatBox(label: "Recovery", value: "Good", icon: "heart.fill", color: .orange)
            }
        }
        .padding()
        .background(Color(.secondarySystemGroupedBackground))
        .cornerRadius(12)
    }
}

struct AdaptationCard: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Label("Current Phase", systemImage: "waveform.path.ecg")
                .font(.headline)
            
            HStack {
                Text("Building")
                    .font(.title2.bold())
                
                Spacer()
                
                Text("Week 3 of 4")
                    .font(.caption)
                    .foregroundStyle(.secondary)
            }
            
            Text("You're in a productive building phase. Keep pushing!")
                .font(.caption)
                .foregroundStyle(.secondary)
            
            ProgressView(value: 0.75)
                .tint(.green)
        }
        .padding()
        .background(Color(.secondarySystemGroupedBackground))
        .cornerRadius(12)
    }
}

struct RecommendationsCard: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Label("Today's Focus", systemImage: "lightbulb.fill")
                .font(.headline)
            
            VStack(alignment: .leading, spacing: 8) {
                RecommendationRow(text: "Increase weight by 2.5-5 lbs on main lifts")
                RecommendationRow(text: "Aim for 6-8 reps per set")
                RecommendationRow(text: "Rest 2-3 minutes between sets")
            }
        }
        .padding()
        .background(Color(.secondarySystemGroupedBackground))
        .cornerRadius(12)
    }
}

struct RecommendationRow: View {
    let text: String
    
    var body: some View {
        HStack(alignment: .top, spacing: 8) {
            Image(systemName: "checkmark.circle.fill")
                .font(.caption)
                .foregroundStyle(.green)
            
            Text(text)
                .font(.subheadline)
        }
    }
}

struct AdvancedToggle: View {
    @AppStorage("showAdvancedMetrics") private var showAdvanced = false
    
    var body: some View {
        Toggle(isOn: $showAdvanced) {
            VStack(alignment: .leading, spacing: 4) {
                Text("Advanced Mode")
                    .font(.headline)
                
                Text("Show detailed metrics and manual controls")
                    .font(.caption)
                    .foregroundStyle(.secondary)
            }
        }
        .padding()
        .background(Color(.secondarySystemGroupedBackground))
        .cornerRadius(12)
    }
}

#Preview {
    let container = try! ModelContainer(for: WorkoutSession.self, configurations: ModelConfiguration(isStoredInMemoryOnly: true))
    let session = WorkoutSession()
    container.mainContext.insert(session)
    
    return MagicWorkoutView(session: session)
        .modelContainer(container)
}